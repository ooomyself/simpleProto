# 目前这套协议暂时只给客户端和服务器通信用，服务器间通信设计了新的rpc机制
# support data types are following :
#									lpack	lua					nodejs.buffer
# S : string			dynamic		A 		"asdf"				b.toString('utf8')
# h : short				2 bytes		>h 		-1234				b.readInt16BE()
# H : unsigned short	2 bytes		>H 		1234				b.readUInt16BE()
# i : int				4 bytes		>i 		-50000				b.readInt32BE()
# I : unsigned int		4 bytes		>I 		50000				b.readUInt32BE()
# c : char				1 bytes		c 		string.byte('c')	b.toString('ascii')
# f : float				4 bytes		>f 		3.14159				b.readFloatBE()
#
#	如果发现类型是 S，则先读取 2 byte 的长度（lpcak: H | nodejs.buffer: b.readUInt16BE()），然后按照长度读取 S
#
# 协议的字节序举例：
# data  : len + msgid + status + S len + S       + h + i + c + f
# bytes : 2   + 2     + 2      + 2     + dynamic + 2 + 4 + 1 + 4
#
#	其中 len 等于除自身之外所有字节总和，status 字段只有服务器发出的协议才会有，客户端发出的协议没有
#
# lua table
# [1000] = {
#     ["keys"] = { "name", "life", "kills", "herotype", "money" },
#     ["types"] = "Shicf",
#     ["target"] = "loc",
#     ["func"] = "getAvgConnServerLoadNums",
#     ["rspid"] = "3005",
# }
#
# js object
# [1000] = {
#     "keys" : [ "name", "life", "kills", "herotype", "money" ],
#     "types" : [ "S", "h", "i", "c", "f" ],
#     "target" : [ "loc" ],
#     "func" : [ "getAvgConnServerLoadNums" ],
#     "rspid" : [ "3005" ]
# }
#
# ini file
# [1000]
# types=Shicf
# keys=name,life,kills,herotype,money
# target=loc
# func=getAvgConnServerLoadNums
# rspid=3005
#
# key 为字母表字符

# 测试保留协议 1000 - 1100
[1000]
types=S
keys=name

[1001]
types=hHiIf
keys=a,b,c,d,e

[1002]
types=c
keys=a

[1003]
types=iSh
keys=a,b,c

[1004]
types=icf
keys=a,b,c

[1005]
types=fc
keys=a,b

[1006]
types=ScSccSSc
keys=a,b,c,d,e,f,g,h

[1007]
types=SSSSSSSSSSSSS
keys=a,b,c,d,e,f,g,h,i,j,k,l,m

[1008]
types=SI
keys=a,b
target=loc

[1009]
types=SI
keys=a,b
target=loc

#==================================================================
# 心跳包协议
[2000]
types=i
keys=time
func=heartBeat
rspid=2001
target=conn

# 心跳回复
[2001]
types=i
keys=time

# 正式协议从 3000 开始，依次往后，每添加一条协议写明协议的作用
# 一组同一个功能的协议用 #================================== 隔开

#==================================================================
#cli发送uuid和区服给gate
[3000]
types=Ii
keys=uuid,area
func=getAvgConnServerLoadNums
rspid=3005
target=gate

#gate把conn的subid，ip，port发回给cli
[3005]
types=iISI
keys=retCode,uuid,host,port

#cli登录conn
[3006]
types=Ii
keys=uuid,area
func=loginGame
rspid=3007
target=conn

#conn返回cli是否登录成功，登录成功就把玩家数据打包发过来
[3007]
types=iHS
keys=retCode,loginState,playerInfo

#创建玩家数据
[3008]
types=IiS
keys=uuid,area,userName
func=createPlayerInfo
rspid=3009
target=loc

#返回创建成功的玩家数据
[3009]
types=iHS
keys=retCode,loginState,playerInfo


#==================================================================
#cli发送对玩家战斗消息
[4000]
types=SS
keys=uuid,enemyid
func=fightEnemy
rspid=4001
target=loc

#conn返回cli战斗结果和种子
[4001]
types=ISH
keys=seed,enemy,result

#==================================================================
#获取英雄列表
[5001]
types=Ii
keys=uuid,area
func=getHeroInfoList
rspid=5002
target=loc

#返回英雄列表
[5002]
types=iS
keys=retCode,heroInfoList

#创建英雄
[5003]
types=IiI
keys=uuid,area,heroId
func=createHero
rspid=5004
target=loc

#返回创建英雄
[5004]
types=iS
keys=retCode,heroInfo

#提升英雄等级
[5005]
types=IiII
keys=uuid,area,heroId,exp
func=upgradeHeroLevel
rspid=5006
target=loc

#返回英雄提升等级后信息
[5006]
types=iSi
keys=retCode,heroInfo,upgradeLevel
#==================================================================
#地图行走协议
[6001]
types=
keys=

